  if i % valid_interval == 0:
                avg_valid_loss, avg_valid_acc = validate(crnn, valid_loader, criterion, device)
                print(f'valid_evaluation: loss={avg_valid_loss}, acc={avg_valid_acc}')

                # Append validation loss and accuracy for plotting
                valid_losses.append(avg_valid_loss)
                valid_accuracies.append(avg_valid_acc)

                # Check for early stopping
                if avg_valid_loss < best_valid_loss:
                    best_valid_loss = avg_valid_loss
                    patience_counter = 0  # Reset counter if validation loss improves
                    
                    # Optionally, save the best model
                    # torch.save(crnn.state_dict(), os.path.join(config['checkpoints_dir'], 'best_crnn_model.pt'))
                else:
                    patience_counter += 1
                    if patience_counter >= patience:
                        print("Early stopping triggered. Stopping training.")
                        break  # Exit the loop early